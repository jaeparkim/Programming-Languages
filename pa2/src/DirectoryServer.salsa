module src;
import java.util.*;
import java.io.*;


/*

  A server designed to divide files into blocks.
  It will then distribute the blocks to file servers.
  It can be queried for the locations of blocks of 
  a file it's divided.

  File servers are launched separately and then registered.

  You may adjust function signatures to your needs, 
  and are encouraged to add helper functions.

*/
behavior DirectoryServer {

    
    int blockSize = 64;
    int id;
    Vector fs = new Vector();
    Hashtable metaData;

    DirectoryServer(int i) {
      id = i;
      metaData = new Hashtable();
    }



    /* Take a file and save it to known file servers.
     *
     * To ensure this is deterministic, always save
     * in round robin order. Start each new file 
     * where you left off for previous files.
     *
     * When new file servers are added, sort them
     * alphabetically and reset the round-robin
     * routine. This doesn't load balance perfectly, 
     * but its simple.
     *
     */
    /* You may pass and return any data you need. */
    void store(String fileName, String content) {
      metaData.put(fileName, new Vector());
      int fileNum = (content.length() / 64) + 1;
      int fsNum = fs.size();

      System.out.println("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
      System.out.println(fsNum);

      for (int i = 0; i < fileNum; i++){
        standardOutput <- println("Storing " + fileName + " block " + Integer.toString(i + 1) + " in fs: " + fs.elementAt(i % fs.size()));
        String block = "";

        if(i == fileNum) {
          block = content.substring(i * 64);
        }
        else {
          String chunk = content.substring(i*64, (i+1)*64);
        }
        Vector v = (Vector) metaData.get(fileName);
        String fs_uan = (String) fs.elementAt(i % fs.size());
        v.add(fs_uan);
        FileServer fs = (FileServer) FileServer.getReferenceByName(fs_uan);
        fs <- store(fileName + "_" + Integer.toString(i+1), block);
      }
    }


    /* Given a file name, return the servers and blocks it's located on. */
    /* You may pass and return any data you need. */
    Vector retrieve(String fileName) {
      Vector blocks = (Vector) metaData.get(fileName);
      
      return blocks;        
    }

    void newFileServer(String fs_uan_str){
      standardOutput <- println("New File Server Created!!!");
      if(fs.isEmpty()) {
        fs.add(fs_uan_str);

        System.out.println("HEREEEEEEEEEEEEEEEEEEEEEEEE");
        System.out.println(fs);

      }
      else {
        for(int i = 0; i < fs.size(); i++){
          if(fs_uan_str.compareToIgnoreCase((String) fs.elementAt(i)) < 0) {
            fs.insertElementAt( (String) fs_uan_str, i);
          }
        }
      }
    }
}