module src;
import java.util.*;
import src.FileUtility;
import java.io.*;
import salsa.naming.*;


/*

  A client that creates and interacts with directory
  and file servers.  Loads instructions from a .script file.

  You may adjust function signatures to your needs, 
  and are encouraged to add helper functions.

*/
behavior Client {


    int blockSize = 64;
    FileUtility inputScript;

    private Vector nodes = new Vector();


    /* Your program's first input must be the path to the 
     * input file it will execute (e.g. input/simple.script).
     * Additional arguments will not be passed for tests.
     */
    void act( String[] args ) {
        if (args.length != 1) {
            standardOutput<-println( "Usage: java migration.Migrate  <commands.script>" );
            return;
        }
        // example input / printing / output
        inputScript = new FileUtility(args[0]);
        
        scanInput();
    }

    /* Reads each line of the input script and passes it to standard input.
     * This occurs sequentially, so we know that each line will only be
     * called when the called message is concluded.
     * 
     * Can be adapted to pass these lines to your helper functions.
     */
    void scanInput() {
        String s = inputScript.nextLine();
        if (s == null) {
            return;
        } else {
            String firstChar = s.substring(0,1);
            if (firstChar.equals("d")){ 
                createDirectoryService(s);
            }
            else if (firstChar.equals("f")) { 
                createFileServer(s);
            }
            else if (firstChar.equals("c")) { 
                create(s);
            }
            else if (firstChar.equals("g")) { 
                get(s);
            }
            else if (firstChar.equals("q")) { 
                quit(s);
            }



            standardOutput <- println(s) @
            scanInput();
        }
        
    }

    void createDirectoryService(String s) {
        standardOutput<-print("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        standardOutput<-print(s);
        String[] tokens = s.split(" ");
        String uan_str = tokens[1];
        String ual_str = tokens[2];
        standardOutput<-print("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX");

        System.out.println("Create Directory Service Method");
        DirectoryServer d = new DirectoryServer() at (new UAN("uan_str"), new UAL(ual_str));

        
        


    }
    
    void createFileService(String s) {
        System.out.println("Create File Service Method");
    }


    void create(String fileName){
        System.out.println("Create Method");
        // filePath = "/input/" + fileName;
        // File f = new File(filePath);
    }

    void get(String s) {
        System.out.println("Get Method");
    }

    void quit(String s) {
        System.out.println("Quit Method");
    }
}