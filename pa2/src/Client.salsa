module src;

import java.util.*;
import src.FileUtility;
import java.io.*;
import salsa.naming.*;
import java.lang.*;


/*

  A client that creates and interacts with directory
  and file servers.  Loads instructions from a .script file.

  You may adjust function signatures to your needs, 
  and are encouraged to add helper functions.

*/
behavior Client {


    int blockSize = 64;
    FileUtility inputScript;

    Vector fileServers = new Vector();
    DirectoryServer d;

    HashMap fileBuilding;


    /* Your program's first input must be the path to the 
     * input file it will execute (e.g. input/simple.script).
     * Additional arguments will not be passed for tests.
     */
    void act( String[] args ) {
        if (args.length != 1) {
            standardOutput<-println( "Usage: java migration.Migrate  <commands.script>" );
            return;
        }
        // example input / printing / output

        inputScript = new FileUtility(args[0]);
        fileBuilding = new HashMap();
        
        scanInput();
    }

    /* Reads each line of the input script and passes it to standard input.
     * This occurs sequentially, so we know that each line will only be
     * called when the called message is concluded.
     * 
     * Can be adapted to pass these lines to your helper functions.
     */
    void scanInput() {
        String s = inputScript.nextLine();

        if (s == null) {
            return;
        } 
        else {
            String firstChar = s.substring(0,1);

            
            if (firstChar.equals("d")){ 
                createDirectoryServer(s);
            }
            else if (firstChar.equals("f")) { 
                createFileServer(s);
                /*
                try {
                    Thread.sleep(5000);
                } catch (Exception e) {
                    System.out.println(e);
                }
                */
            }
            else if (firstChar.equals("c")) { 
                create(s);
            }
            else if (firstChar.equals("g")) { 
                // get(s);
            }
            else if (firstChar.equals("q")) { 
                // quit(s);
            }
            
            System.out.println("________________________");
            System.out.println(s);

            scanInput();
        }
        
    }

    void createDirectoryServer(String s) {
        // standardOutput <- println(s); 
        String[] tokens = s.split(" ");
        String uan_str = tokens[1];
        String ual_str = tokens[2];
        standardOutput <- println("Create Directory Service Method"); 
        DirectoryServer d = new DirectoryServer(0) at (new UAN(uan_str), new UAL(ual_str));
    }
    
    void createFileServer(String s) {
        String[] tokens = s.split(" ");
        String ds_uan_str = tokens[1];
        String uan_str = tokens[2];
        String ual_str = tokens[3];

        DirectoryServer d  = (DirectoryServer) DirectoryServer.getReferenceByName(ds_uan_str);
        
        d <- newFileServer(uan_str);
        fileServers.add(new FileServer(ds_uan_str, uan_str) at (new UAN(uan_str), new UAL(ual_str)));
        
        standardOutput <- println("Waiting");
        FileServer fs = (FileServer) FileServer.getReferenceByName(new UAN(uan_str));
        standardOutput <- println("Creating File Server");
        standardOutput <- println("Done Waiting");
    }


    void create(String s){
        String[] tokens = s.split(" ");
        String ds_uan_str = tokens[1];
        String filename = tokens[2];

        standardOutput <- println("Create Method");
        String filepath = "./input/" + filename;
        String contents = inputScript.load(filepath);
        int numBlocks = contents.length() / 64 + 1; // fix this?
        fileBuilding.put(filename, new Vector(numBlocks));
        DirectoryServer d = (DirectoryServer) DirectoryServer.getReferenceByName(new UAN(ds_uan_str));
        d <- store(filename, contents);
    }

    void get(String s) {
        String[] tokens = s.split(" ");
        String ds_uan_str = tokens[1];
        String filename = tokens[2];
        DirectoryServer d = (DirectoryServer) DirectoryServer.getReferenceByName(new UAN(ds_uan_str));
        d <- retrieve(filename) @ self <- receiveBlocks(token);

        // save(filenameInDownloads, fileBuilding.get(filename).toString());

    }

    void receiveBlocks(String fileName, Vector blocks){
        String text = "";

        for (int i = 0; i < blocks.size(); i++){
            String fs_uan = (String) blocks.elementAt(i);
            FileServer fs = (FileServer) FileServer.getReferenceByName(new UAN(fs_uan));
            fs <- retrieve(fileName + "_" + Integer.toString(i+1), i) @ self <- receiveBlock(token);
        }
    }

    void receiveBlock(String fileName, String blockText, int block){
        Vector v = (Vector) fileBuilding.get(fileName);
        v.setElementAt(blockText, block);

    }

    void quit(String s) {
        System.out.println("Quit Method");
    }
}